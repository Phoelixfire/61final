//Felix Gonzales
String people[]= {   //names of people in array 2
  "John", "Josh", 
  "Zyra", "Jenny", "Carol", "Shari", "Shirley", "Rick", 
  "Kevin", "Joey", "Brian"
};      //name of people
Worker aa, bb, cc, dd, ee, ff, gg, hh, ii, jj, kk;



String names[]= {   //names of people in array 1
  "Aries", "Cancer", "Draco", "Hercules", "Hydra", 
  "Lyra", "Orion", "Pegasus", "Phoenix", "Taurus", "Virgo", 
  "Serpens", "Pisces", "Octans"
};      //name of constellations
Constellation a, b, c, d, e, f, g, h, i, j, k, l, m, n;

Button[] buttons;
String buttonNames[]= { 
  "Raise", "Bonus", "Add age", "Switch", "Thick last", "Tall last", "Reset", "Quit"
};
int numButtons=  buttonNames.length;

float cb = 100, cg = 100, cr = 100;  //color blue & green 
int yt=0;

void setup() { 
  int w = 750, h = 550;
  size(w, h);
  groupone();
  grouptwo();
  makebuttons();
}


void draw() {

  if ((yt & 1) == 0) {   //if yt is odd then show array 1, if even then show array 2
    arrayone();
  } else {
    arraytwo();
  }
  texts();
}


void arrayone() {     //array 1 show
  float xd;
  float ce = .2;  //color change speed
  background(70, cg, cb);
  fill(255);
  text( "Array 1", 500, 20 );
  rectMode(CORNER);
  noStroke();
  fill(15, 149, 76);
  rect(0, 400, width, 200);   //platform
  if (cg >= 255 ) cg= 100;    //color reset
  if (cb >= 255 ) cb =100;
  cb= cb + ce;   //sky color change
  cg= cg + ce;
  fill(255);
  text("CST 112 Felix Gonzales", 600, 510);
  buttons();

  a.show(50, 400);   //show people for first array
  b.show(100, 400);
  c.show(150, 400);
  d.show(200, 400);
  e.show(250, 400);
  f.show(300, 400);
  g.show(350, 400);
  h.show(400, 400);
  i.show(450, 400);
  j.show(500, 400);
  k.show(550, 400);
  l.show(600, 400);
  m.show(650, 400);
  n.show(700, 400);
}

void arraytwo() {  //array 1 show
  float xd;
  float ce = .2;  //color change speed
  background(cr, cg, cb);  //sky color change
  fill(255);
  text( "Array 2", 500, 20 );
  rectMode(CORNER);   
  noStroke();
  fill(15, 149, 76);   //platform color
  rect(0, 400, width, 200);   //platform
  if (cg >= 255 ) cg= 50;  //color reset
  if (cr >= 255 ) cr =50;
  cr= cr + ce;
  cg= cg + ce;
  fill(255);
  text("CST 112 Felix Gonzales", 600, 510);
  buttons();

  aa.show(40, 400);   //show people for second array
  bb.show(100, 400);
  cc.show(160, 400);
  dd.show(220, 400);
  ee.show(280, 400);
  ff.show(340, 400);
  gg.show(400, 400);
  hh.show(460, 400);
  ii.show(520, 400);
  jj.show(580, 400);
  kk.show(640, 400);
}


void texts() {    //guide. shows texts
  fill(255);
  text( "r = reset.", 10, 12 );
  text( "t = move tallest to the end", 10, 24 );
  text( "w = move thickest to the end.", 10, 36 );
  text( "o = everyone gains 1 year.", 10, 48 );
  text( "q = quit.", 10, 60 );
  text( "1 = give 1 time raise",10,72);
  text( "2 = give bonus of $1000", 10, 84);
  text( "3 = switch array", 10, 96);
}

void groupone() {  //for first array
  a = new Constellation(names[0]);
  b = new Constellation(names[1]);
  c = new Constellation(names[2]);
  d = new Constellation(names[3]);
  e = new Constellation(names[4]);
  f = new Constellation(names[5]);
  g = new Constellation(names[6]);
  h = new Constellation(names[7]);
  i = new Constellation(names[8]);
  j = new Constellation(names[9]);
  k = new Constellation(names[10]);
  l = new Constellation(names[11]);
  m = new Constellation(names[12]);
  n = new Constellation(names[13]);
}


void grouptwo() {  //for second array
  aa = new Worker(people[0]);
  bb = new Worker(people[1]);
  cc = new Worker(people[2]);
  dd = new Worker(people[3]);
  ee = new Worker(people[4]);
  ff = new Worker(people[5]);
  gg = new Worker(people[6]);
  hh = new Worker(people[7]);
  ii = new Worker(people[8]);
  jj = new Worker(people[9]);
  kk = new Worker(people[10]);
}


class Constellation {   //Class for Array # 1
  float w, h;
  int age;
  float  r, g, b, hr, hg, hb;
  String name="?";
  int salary;
  int raise;

  Constellation (String names) {  //constructor
    r= random(255);
    g= random(255);
    b= random(255);
    hr= random(255);
    hg= random(255);
    hb= random(255);
    w=  random(20, 40);
    h=  random(30, 150);
    
    name = names;
    age = int(h/2);
    if (age >=18) {
      salary = int(random(1000, 100000));
    } else { 
      salary = int(0);
    }
    if (salary <= 25000) {   //shows formula for raise
      raise= int(salary + salary * .20);
    } else if (salary > 25000 && salary < 50000) {
      raise= int(salary + salary * .15);
    } else if (salary >= 50000 && salary < 75000) {
      raise= int(salary + salary * .10);
    } else if (salary >= 7500) {
      raise = salary;
    }
    raise = int(raise);
    
  }

  void show( float x, float y) {   //shows under people in array 1
    fill(r, g, b);
    rectMode(CENTER);
    ellipse( x, y-h/2, w, h );  //body
    text ( name, x, y+20);
    int feet, inches;
    feet=  int( h / 12 );
    inches=  int( h % 12 );
    text ( feet+"' " + inches+"''", x, y+35);   //height text
    float lb=  (h * w * w) / 500 ;
    text ( int(lb())+"lb", x, y+50);   //pounds text
    head( x, (y-h)-(h/3)/2, h/3 );
    text (age+"yrs", x, y+65);   //years text
    text ("$"+salary, x, y+80);  //salary text
  }
  void head( float x, float hY, float hH ) {  //head of people
    rect( x, hY, hH, hH );  //head
    fill( 255, 255, 255 );
    ellipse( x, hY+6, w/4, h/10 );   //mouth
    fill(0);
    rect(x, hY -(hH/2), hH-(hH/3), 5);    //top hat
    rectMode(CORNER);
    rect(x-hH/4, hY -hH, hH-(hH/2), hH-hH/2);
    fill(255);
    ellipse( x-6, hY-6, 8, 12 );   //left eye
    fill(0, 0, 255);
    ellipse( x-6, hY-6, 4, 5 );
    fill(255);
    ellipse( x+6, hY-6, 8, 12 );   //right eye
    fill(0, 0, 255);
    ellipse( x+6, hY-6, 4, 5 );
  }


  float lb() {   //formula for pounds
    return (h * w * w) / 500 ;
  }
}





class Worker {   //array # 2
  float w, h;
  int age;
  float  r, g, b, hr, hg, hb;
  String name="?";
  int salary;
  int raise;
  


  Worker (String people) {
    r= random(255);
    g= random(255);
    b= random(255);
    hr= random(255);
    hg= random(255);
    hb= random(255);
    w=  random(20, 40);
    h=  random(30, 150);
    name = people;

    age = int(h/2);  //formula for age
    if (age >=18) {   
      salary = int(random(1000, 100000));   //formual for salary
    } else { 
      salary = int(0);
    }

    if (salary <= 25000) {      //formula for raise
      raise= int(salary + salary * .20);
    } else if (salary > 25000 && salary < 50000) {
      raise= int(salary + salary * .15);
    } else if (salary >= 50000 && salary < 75000) {
      raise= int(salary + salary * .10);
    } else if (salary >= 7500) {
      raise = salary;
    }
    
    
  }

  void show( float x, float y) {   //shows under people in array # 2
    int bonus= salary * int(1+(25/100));
    fill(r, g, b);
    rectMode(CENTER);
    rect( x, y-h/2, w, h );  //body
    text ( name, x, y+20);  //name display
    int feet, inches;
    feet=  int( h / 12 );
    inches=  int( h % 12 );
    text ( feet+"' " + inches+"''", x, y+35);  //shows height of people
    float lb=  (h * w * w) / 500 ;
    text ( int(lb())+"lb", x, y+50);   //shows weight of people
    head( x, (y-h)-(h/3)/2, h/3 );
    text (age+"yrs", x, y+65);   //shows year of people
    text ("$"+salary, x, y+80);  //shows salary of people
  }
  void head( float x, float hY, float hH ) {
    ellipse( x, hY, hH, hH );  //head
    fill( 255, 255, 255 );
    ellipse( x, hY+6, w/4, h/10 );   //mouth
    fill(0);
    rect(x, hY -(hH/2), hH-(hH/3), 5);    //top hat
    rectMode(CORNER);
    rect(x-hH/4, hY -hH, hH-(hH/2), hH-hH/2);
    rectMode(CENTER);
    fill(255);
    rect( x-6, hY-6, 8, 12 );   //left eye
    fill(0, 0, 255);
    ellipse( x-6, hY-6, 4, 5 );
    fill(255);
    rect( x+6, hY-6, 8, 12 );   //right eye
    fill(0, 0, 255);
    ellipse( x+6, hY-6, 4, 5 );
  }


  float lb() {   //formula for pounds
    return (h * w * w) / 500 ;
  }
}


void bonus() {  //formula for the bonus
 int bonus = 1000;
  a.salary = a.salary + bonus;
  b.salary = b.salary + bonus;
  c.salary = c.salary + bonus;
  d.salary = d.salary + bonus;
  e.salary = e.salary + bonus;
  f.salary = f.salary + bonus;
  g.salary = g.salary + bonus;
  h.salary = h.salary + bonus;
  i.salary = i.salary + bonus;
  j.salary = j.salary + bonus;
  k.salary = k.salary + bonus;
  l.salary = l.salary + bonus;
  m.salary = m.salary + bonus;
  n.salary = n.salary + bonus;
  aa.salary = aa. salary + bonus;
  bb.salary = bb. salary + bonus;
  cc.salary = cc. salary + bonus;
  dd.salary = dd. salary + bonus;
  ee.salary = ee. salary + bonus;
  ff.salary = ff. salary + bonus;
  gg.salary = gg. salary + bonus;
  hh.salary = hh. salary + bonus;
  ii.salary = ii. salary + bonus;
  jj.salary = jj. salary + bonus;
  kk.salary = kk. salary + bonus;
}


void raise() {   //formual for raise
  a.salary = a.raise;
  b.salary = b.raise;
  c.salary = c.raise;
  d.salary = d.raise;
  e.salary = e.raise;
  f.salary = f.raise;
  g.salary = g.raise;
  h.salary = h.raise;
  i.salary = i.raise;
  j.salary = j.raise;
  k.salary = k.raise;
  l.salary = l.raise;
  m.salary = m.raise;
  n.salary = n.raise;
  aa.salary = aa.raise;
  bb.salary = bb.raise;
  cc.salary = cc.raise;
  dd.salary = dd.raise;
  ee.salary = ee.raise;
  ff.salary = ff.raise;
  gg.salary = gg.raise;
  hh.salary = hh.raise;
  ii.salary = ii.raise;
  jj.salary = jj.raise;
  kk.salary = kk.raise;
}


void older() {
  if ((yt & 1) == 0) {  //this makes sure that the buttons only work for the array that is currently showing
    a.age = a.age+1; 
    if (a.age > 100) a = new Constellation(names[0]);  //will cause new person to spawn once they reach 100
    b.age = b.age+1;                                   //will add a year to the age
    if (b.age > 100) b = new Constellation(names[1]);
    c.age = c.age+1;
    if (c.age > 100) c = new Constellation(names[2]);
    d.age = d.age+1;
    if (d.age > 100) d = new Constellation(names[3]);
    e.age = e.age+1;
    if (e.age > 100) e = new Constellation(names[4]);
    f.age = f.age+1;
    if (f.age > 100) f = new Constellation(names[5]);
    g.age = g.age+1;
    if (g.age > 100) g = new Constellation(names[6]);
    h.age = h.age+1;
    if (h.age > 100) h = new Constellation(names[7]);
    i.age = i.age+1;
    if (i.age > 100) i = new Constellation(names[8]);
    j.age = j.age+1;
    if (j.age > 100) j = new Constellation(names[9]);
    k.age = k.age+1;
    if (k.age > 100) k = new Constellation(names[10]);
    l.age = l.age+1;
    if (l.age > 100) l = new Constellation(names[11]);
    m.age = m.age+1;
    if (m.age > 100) m = new Constellation(names[12]);
    n.age = n.age+1;
    if (n.age > 100) n = new Constellation(names[13]);
  } else {              //this makes sure that the buttons only work for the array that is currently showing
    aa.age = aa.age+1; 
    if (aa.age > 100) aa = new Worker(names[0]);  //will cause new person to spawn once they reach 100
    bb.age = bb.age+1;
    if (bb.age > 100) bb = new Worker(names[1]);
    cc.age = cc.age+1;
    if (cc.age > 100) cc = new Worker(names[2]);
    dd.age = dd.age+1;
    if (dd.age > 100) dd = new Worker(names[3]);
    ee.age = ee.age+1;
    if (ee.age > 100) ee = new Worker(names[4]);
    ff.age = ff.age+1;
    if (ff.age > 100) ff = new Worker(names[5]);
    gg.age = gg.age+1;
    if (gg.age > 100) gg = new Worker(names[6]);
    hh.age = hh.age+1;
    if (hh.age > 100) hh = new Worker(names[7]);
    ii.age = ii.age+1;
    if (ii.age > 100) ii = new Worker(names[8]);
    jj.age = jj.age+1;
    if (jj.age > 100) jj = new Worker(names[9]);
    kk.age = kk.age+1;
    if (kk.age > 100) kk = new Worker(names[10]);
  }
}


void tallest() {  //*********i did it this way as i understand it a bit better than the shorter way***********
  if ((yt & 1) == 0) {  //this makes sure that the buttons only work for the array that is currently showing
    Constellation tmp=  n;
    if (a.h>b.h && a.h>c.h && a.h>d.h && a.h>e.h && a.h>f.h && a.h>g.h && a.h>h.h && a.h>i.h && a.h>j.h && a.h>k.h
      && a.h>l.h && a.h>m.h && a.h>n.h) {
      n=  a;
      a= tmp;
    } else if (b.h>c.h && b.h>d.h && b.h>e.h && b.h>f.h && b.h>g.h && b.h>h.h && b.h>i.h && b.h>j.h && b.h>k.h
      && b.h>l.h && b.h>m.h && b.h>n.h) {
      n=  b;
      b= tmp;
    } else if (c.h>d.h && c.h>e.h && c.h>f.h && c.h>g.h && c.h>h.h && c.h>i.h && c.h>j.h && c.h>k.h
      && c.h>l.h && c.h>m.h && c.h>n.h) {
      n=  c;
      c= tmp;
    } else if (d.h>e.h && d.h>f.h && d.h>g.h && d.h>h.h && d.h>i.h && d.h>j.h && d.h>k.h && d.h>l.h && d.h>m.h && d.h>n.h) {
      n=  d;
      d= tmp;
    } else if (e.h>f.h && e.h>g.h && e.h>h.h && e.h>i.h && e.h>j.h && e.h>k.h && e.h>l.h && e.h>m.h && e.h>n.h) {
      n=  e;
      e= tmp;
    } else if (f.h>g.h && f.h>h.h && f.h>i.h && f.h>j.h && f.h>k.h && f.h>l.h && f.h>m.h && f.h>n.h) {
      n=  f;
      f= tmp;
    } else if (g.h>h.h && g.h>i.h && g.h>j.h && g.h>k.h && g.h>l.h && g.h>m.h && g.h>n.h) {
      n=  g;
      g= tmp;
    } else if (h.h>i.h && h.h>j.h && h.h>k.h && h.h>l.h && h.h>m.h && h.h>n.h) {
      n=  h;
      h= tmp;
    } else if (i.h>j.h && i.h>k.h && i.h>l.h && i.h>m.h && i.h>n.h) {
      n=  i;
      i= tmp;
    } else if ( j.h>k.h && j.h>l.h && j.h>m.h && j.h>n.h) {
      n=  j;
      j= tmp;
    } else if (k.h>l.h && k.h>m.h && k.h>n.h) {
      n=  k;
      k= tmp;
    } else if (l.h>m.h && l.h>n.h) {
      n=  l;
      l= tmp;
    } else if (m.h>n.h) {
      d=  m;
      m= tmp;
    }
  } else {    //this is for second array
    Worker tmp=  kk;
    if (aa.h>bb.h && aa.h>cc.h && aa.h>dd.h && aa.h>ee.h && aa.h>ff.h && aa.h>gg.h && aa.h>hh.h && aa.h>ii.h && aa.h>jj.h && aa.h>kk.h) {
      kk=  aa;
      aa= tmp;
    } else if (bb.h>cc.h && bb.h>dd.h && bb.h>ee.h && bb.h>ff.h && bb.h>gg.h && bb.h>hh.h && bb.h>ii.h && bb.h>jj.h && bb.h>kk.h) {
      kk=  bb;
      bb= tmp;
    } else if (cc.h>dd.h && cc.h>ee.h && cc.h>ff.h && cc.h>gg.h && cc.h>hh.h && cc.h>ii.h && cc.h>jj.h && cc.h>kk.h) {
      kk=  cc;
      cc= tmp;
    } else if (dd.h>ee.h && dd.h>ff.h && dd.h>gg.h && dd.h>hh.h && dd.h>ii.h && dd.h>jj.h && dd.h>kk.h) {
      kk=  dd;
      dd= tmp;
    } else if (ee.h>ff.h && ee.h>gg.h && ee.h>hh.h && ee.h>ii.h && ee.h>jj.h && ee.h>kk.h) {
      kk=  ee;
      ee= tmp;
    } else if (ff.h>gg.h && ff.h>hh.h && ff.h>ii.h && ff.h>jj.h && ff.h>kk.h) {
      kk=  ff;
      ff= tmp;
    } else if (gg.h>hh.h && gg.h>ii.h && gg.h>jj.h && gg.h>kk.h) {
      kk=  gg;
      gg= tmp;
    } else if (hh.h>ii.h && hh.h>jj.h && hh.h>kk.h) {
      kk=  hh;
      hh= tmp;
    } else if (ii.h>jj.h && ii.h>kk.h) {
      kk=  ii;
      ii= tmp;
    } else if ( jj.h>kk.h) {
      kk=  jj;
      jj= tmp;
    }
  }
}

void thickest() {
  if ((yt & 1) == 0) {   //this makes sure that the buttons only work for the array that is currently showing
    Constellation tmp=  n;
    if (a.lb()>b.lb() && a.lb()>c.lb() && a.lb()>d.lb() && a.lb()>e.lb() && a.lb()>f.lb() && a.lb()>g.lb() && a.lb()>h.lb() && a.lb()>i.lb() && a.lb()>j.lb() && a.lb()>k.lb()
      && a.lb()>l.lb() && a.lb()>m.lb() && a.lb()>n.lb()) {
      n=  a;
      a= tmp;
    } else if (b.lb()>c.lb() && b.lb()>d.lb() && b.lb()>e.lb() && b.lb()>f.lb() && b.lb()>g.lb() && b.lb()>h.lb() && b.lb()>i.lb() && b.lb()>j.lb() && b.lb()>k.lb()
      && b.lb()>l.lb() && b.lb()>m.lb() && b.lb()>n.lb()) {
      n=  b;
      b= tmp;
    } else if (c.lb()>d.lb() && c.lb()>e.lb() && c.lb()>f.lb() && c.lb()>g.lb() && c.lb()>h.lb() && c.lb()>i.lb() && c.lb()>j.lb() && c.lb()>k.lb()
      && c.lb()>l.lb() && c.lb()>m.lb() && c.lb()>n.lb()) {
      n=  c;
      c= tmp;
    } else if (d.lb()>e.lb() && d.lb()>f.lb() && d.lb()>g.lb() && d.lb()>h.lb() && d.lb()>i.lb() && d.lb()>j.lb() && d.lb()>k.lb() && d.lb()>l.lb() && d.lb()>m.lb() && d.lb()>n.lb()) {
      n=  d;
      d= tmp;
    } else if (e.lb()>f.lb() && e.lb()>g.lb() && e.lb()>h.lb() && e.lb()>i.lb() && e.lb()>j.lb() && e.lb()>k.lb() && e.lb()>l.lb() && e.lb()>m.lb() && e.lb()>n.lb()) {
      n=  e;
      e= tmp;
    } else if (f.lb()>g.lb() && f.lb()>h.lb() && f.lb()>i.lb() && f.lb()>j.lb() && f.lb()>k.lb() && f.lb()>l.lb() && f.lb()>m.lb() && f.lb()>n.lb()) {
      n=  f;
      f= tmp;
    } else if (g.lb()>h.lb() && g.lb()>i.lb() && g.lb()>j.lb() && g.lb()>k.lb() && g.lb()>l.lb() && g.lb()>m.lb() && g.lb()>n.lb()) {
      n=  g;
      g= tmp;
    } else if (h.lb()>i.lb() && h.lb()>j.lb() && h.lb()>k.lb() && h.lb()>l.lb() && h.lb()>m.lb() && h.lb()>n.lb()) {
      n=  h;
      h= tmp;
    } else if (i.lb()>j.lb() && i.lb()>k.lb() && i.lb()>l.lb() && i.lb()>m.lb() && i.lb()>n.lb()) {
      n=  i;
      i= tmp;
    } else if ( j.lb()>k.lb() && j.lb()>l.lb() && j.lb()>m.lb() && j.lb()>n.lb()) {
      n=  j;
      j= tmp;
    } else if (k.lb()>l.lb() && k.lb()>m.lb() && k.lb()>n.lb()) {
      n=  k;
      k= tmp;
    } else if (l.lb()>m.lb() && l.lb()>n.lb()) {
      n=  l;
      l= tmp;
    } else if (m.lb()>n.lb()) {
      d=  m;
      m= tmp;
    }
  } else {  //this will only apply to second array when it is visible
    Worker tmp=  kk;
    if (aa.lb()>bb.lb() && aa.lb()>cc.lb() && aa.lb()>dd.lb() && aa.lb()>ee.lb() && aa.lb()>ff.lb() && aa.lb()>gg.lb() && aa.lb()>hh.lb() && aa.lb()>ii.lb() && aa.lb()>jj.lb() && aa.lb()>kk.lb()) {
      kk=  aa;
      aa= tmp;
    } else if (bb.lb()>cc.lb() && bb.lb()>dd.lb() && bb.lb()>ee.lb() && bb.lb()>ff.lb() && bb.lb()>gg.lb() && bb.lb()>hh.lb() && bb.lb()>ii.lb() && bb.lb()>jj.lb() && bb.lb()>kk.lb()) {
      kk=  bb;
      bb= tmp;
    } else if (cc.lb()>dd.lb() && cc.lb()>ee.lb() && cc.lb()>ff.lb() && cc.lb()>gg.lb() && cc.lb()>hh.lb() && cc.lb()>ii.lb() && cc.lb()>jj.lb() && cc.lb()>kk.lb()) {
      kk=  cc;
      cc= tmp;
    } else if (dd.lb()>ee.lb() && dd.lb()>ff.lb() && dd.lb()>gg.lb() && dd.lb()>hh.lb() && dd.lb()>ii.lb() && dd.lb()>jj.lb() && dd.lb()>kk.lb()) {
      kk=  dd;
      dd= tmp;
    } else if (ee.lb()>ff.lb() && ee.lb()>gg.lb() && ee.lb()>hh.lb() && ee.lb()>ii.lb() && ee.lb()>jj.lb() && ee.lb()>kk.lb()) {
      kk=  ee;
      ee= tmp;
    } else if (ff.lb()>gg.lb() && ff.lb()>hh.lb() && ff.lb()>ii.lb() && ff.lb()>jj.lb() && ff.lb()>kk.lb()) {
      kk=  ff;
      ff= tmp;
    } else if (gg.lb()>hh.lb() && gg.lb()>ii.lb() && gg.lb()>jj.lb() && gg.lb()>kk.lb()) {
      kk=  gg;
      gg= tmp;
    } else if (hh.lb()>ii.lb() && hh.lb()>jj.lb() && hh.lb()>kk.lb()) {
      kk=  hh;
      hh= tmp;
    } else if (ii.lb()>jj.lb() && ii.lb()>kk.lb()) {
      kk=  ii;
      ii= tmp;
    } else if ( jj.lb()>kk.lb()) {
      kk=  jj;
      jj= tmp;
    }
  }
}  



void buttons() {  //array of buttons
  for (int j=0; j<buttonNames.length; j++) {
    buttons[j].show();
  }
}



void mousePressed() {   //mouse pressed actions
  if ( buttons[0].click(mouseX, mouseY) ) { //to apply raise
    raise();
    return;
  }

  if ( buttons[1].click(mouseX, mouseY) ) { //to apply bonus
    bonus();
    return;
  }

  if ( buttons[2].click(mouseX, mouseY) ) { //to add age
    older();
    return;
  }
  if ( buttons[3].click(mouseX, mouseY) ) { //to switch arrays
    yt++;
    return;
  }
  if ( buttons[4].click(mouseX, mouseY) ) { //to move thickest to the last place
    thickest();  
    return;
  }
  if ( buttons[5].click(mouseX, mouseY) ) { //to move tallest to the last place
    tallest();
    ;
    return;
  }
  if ( buttons[6].click(mouseX, mouseY) ) { 
    if ((yt & 1) == 0) {
      groupone();  //will only reset array that is currently displaying
    } else {
      grouptwo();
    } 
    return;
  }
  if ( buttons[7].click(mouseX, mouseY) ) { //to quit
    exit(); 
    return;
  }
}



class Button {   //class for buttons
  float x, y;
  float w=60, h=30;  //width & height of buttons
  String name;
  float r=random(255), g=random(255), b=random(255);  //colors of buttons

  Button( float x, float y, String s ) { //constructor
    this.x=x;
    this.y=y;
    this.name=  s;
  }

  void show() {  //creating button
    noStroke();
    fill(r, g, b);
    rect( x+40, y+15, w, h );
    fill(0);
    text( name, x+45, (y+h*2/3)+20 );
  }
  boolean click( float mX, float mY ) {   //range of click for button to work
    if (mX < x+40)   return false;
    if (mX > x+w+40) return false;
    if (mY < y+15)   return false;
    if (mY > y+h+15) return false;
    return true;
  }
}

void makebuttons() {   //array of buttons
  buttons=  new Button[numButtons];
  float x=10, y=500;
  for (int j=0; j<numButtons; j++ ) {
    buttons[j]=  new Button( x, y, buttonNames[j] );
    x += 80;
  }
}


void keyPressed() {  //keyPressed functions
  if (key == 'q') exit();
  if (key == 'r') { 
    if ((yt & 1) == 0) {
      groupone();  //will only reset array that is currently displaying
    } else {
      grouptwo();
    }
  }
  if (key == 't') tallest();   //move tallest to end
  if (key == 'w') thickest();  //move thickest to end
  if (key == 'o') older();     //add a year to age
  if (key == '3') yt++;        //switch arrays
  if (key == '2') bonus();     //apply bonus  
  if (key == '1') raise();     //apply raise
}
